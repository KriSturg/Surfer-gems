#!/bin/bash
# ------------------------------------------------------------------------------------------------------------
# Default Arguments
cd ~/..
me=$(whoami)
usrpth=$(pwd)
usrpth=$usrpth/$me
binpth="$usrpth/bin/"
cd $usrpth

hname=$(hostname)
mach=$(machine)
d=$(date)

r='/exports/home/$me/test'
s="149959"
dm='2012-6-14'
dx='2012-6-15'
rf='.nii'
t="rest MPRAGE"
ra=(Rest Anat)
# ------------------------------------------------------------------------------------------------------------
# Help Function
show_help() {
    cat <<EOF
    Usage ${0##*/} [-h|--help] [-r|--rawdatadir PATH] [-s|--subjnames LIST] [-dm|--mindate MINDATE]
    			[-dx|--maxdate MAXDATE] [-rf|--rawformat] [-t|--tasks TASKLIST] [-ra|--renameas LIST] 
    
    Connects to pauling MYSQL server to extract and convert TASK dicom files into IMG format for a given
    list of subjects, SUBJLIST, with data collected in the range DMIN DMAX. Converted images are renamed
    and stored in RAWDATADIR.

    Options :: 
    -h  --help           displays help
    -rd --rawdatadir     directory path to extract data to
    -s  --subjnames      subject ID to extract data for
    -dm --mindate 	     minimum of date range for data extraction (YYYY-MM-DD format)
    -dx --maxdate 	 	 maximum of date range for data extraction (YYYY-MM-DD format)
    -rf --rawformat      image format (.nii/.img/.nii.gz)    
    -t  --tasks 	     list of tasks to extract data for (series description)
    -ra --renameas 	     prefix for renaming task scans

    Example :: 

    ${0##*/} -r /exports/home/$me/ADS/data/raw/w1 -s "149959" -dm 2012-6-14 -dx 2012-6-15 -rf .nii -t "MPRAGE Rest" -ra "Anat Rest"

EOF
}
# ------------------------------------------------------------------------------------------------------------
# Option Parsing
while :; do
    case $1 in
        -h|--help)
        show_help
        exit 
        ;;
        -r|--rawdatadir)
            if [ -n "$2" ]; then
                r=$2
                shift
            else
                echo "ERROR:  -r --rawdatadir requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -s|--subjnames)
            if [ -n "$2" ]; then
                s=$2
                shift
            else
                echo "ERROR:  -s --subjnames requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -dm|--mindate)
            if [ -n "$2" ]; then
                dm=$2
                shift
            else
                echo "ERROR:  -dm --mindate requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;            
        -dx|--maxdate)
            if [ -n "$2" ]; then
                dx=$2
                shift
            else
                echo "ERROR:  -dx --maxdate requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;  
        -rf|--rawformat)
            if [ -n "$2" ]; then
                rf=$2
                shift
            else
                echo "ERROR:  -rf --rawdformat requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;                          
        -t|--tasks)
            if [ -n "$2" ]; then
                t=$2
                shift
            else
                echo "ERROR:  -t --tasks requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;
        -ra|--renameas)
            if [ -n "$2" ]; then
                ra=($2)
                shift
            else
                echo "ERROR:  -ra --renameas requires a non-empty option argument.\n" >&2
                exit 
            fi
            ;;          
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            break
    esac

    shift
done
# Print Inputs to Screen (debugging purposes)
# ------------------------------------------------------------------------------------------------------------
cat <<EOD

NEXTRACTOMATIC INPUTS   

    rawdatadir          ::      $r
    subject(s)          ::      $s
    date range          ::      $dm to $dx
    tasks               ::      $t
    renameas            ::      ${ra[*]}

EOD
# ------------------------------------------------------------------------------------------------------------
# Extraction via MYSQL
for sub in $s; do
	#echo "Subject = $sub"
    # 1. Does Subject Have Data in Time Range?
    p=`echo "use DicomDatabase; select stu.StuDatTim from StudyLevel as stu where stu.PatNam='$sub' and (stu.StuDatTim between '$dm%' and '$dx%') limit 1" | mysql -h pauling -u dicom --password=imVq5T@2y -s`
    if [ ! -z "$p" ]; then
		echo -e "\n ! DICOM DATA FOUND :: "
		subdir="$r/$sub"
		mkdir -p $subdir
		# 2. Loop over all of the Series Descriptions
		n=0
		for sd in $t; do
	    	# Need to deal w/ multiple series for the same series descriptions
	    	ser=`echo "use DicomDatabase; select ser.SerInsUID from StudyLevel as stu, SeriesLevel as ser where (stu.PatNam='$sub' and (stu.StuDatTim between '$dm%' and '$dx%')) and (ser.StuParent=stu.StuInsUID and ser.SerDes like '%$sd%')" | mysql -h pauling -u dicom --password=imVq5T@2y -s`
	    	nser=($ser)
	    	mult=${#nser[@]}; m=1

	    	# 3. Loop over the matching series
	    		for curser in $ser; do
		        	if [ $mult -gt 1 ]; then pf="-$m"; else pf=""; fi
		    	    BaseName=${ra[$n]}
	    	    	echo -e "\t\t\t* $BaseName \n"
	    	    	subdatadir="$subdir/$BaseName$pf"
	        		mkdir -p "$subdatadir"

	        		# 4. Determine if this is a structural scan or functional by getting path and finding out how many .ACQ directories there are...
	        		p=`echo "use DicomDatabase; select ins.Path from ImageLevel as img, InstanceTable as ins where img.SerParent='$curser' and ins.ImageUID=img.SOPInsUID limit 1" | mysql -h pauling -u dicom --password=imVq5T@2y -s`
	        		d=${p%%SER*}SER
	        		num=`ls -ld $d/*.ACQ | wc -l`
	        		if [ `printf $num` -gt 1 ]; then fmri=1; else fmri=0; fi

	        		if [ $fmri -eq 1 ]; then
	            		# 5. Convert all of the files that are within given date range and match the series description
	            		for f in `echo "use DicomDatabase; select ins.Path from ImageLevel as img, InstanceTable as ins where img.SerParent='$curser' and ins.ImageUID=img.SOPInsUID" | mysql -h pauling -u dicom --password=imVq5T@2y -s`; do
	        				num=`ls -ld $f | wc -l`        			
	        				if [ `printf $num` -lt 1 ]; then f=${f/ACQ/acq}; fi
		        			/exports/home/$me/bin/dcm2niix -o $subdatadir -z n -t y $f > /dev/null
	            		done
	        		else
	            		num=`ls -ld $p | wc -l`
	            		if [ `printf $num` -lt 1 ]; then p=${p/ACQ/acq}; fi
							/exports/home/$me/bin/dcm2niix -o $subdatadir -z n -t y $p > /dev/null	            			
	            			rm -f co* o*
	        			fi
	        		# 6. Now rename the files to something easier to work with
	        		i=1
	        		for f in `ls -v $subdatadir/*$rf`; do
	            		VolNum=`printf "%05d" $i`
	            		mv $f $subdatadir/$BaseName-$VolNum$rf
	            		(( i += 1 ))
	        		done
                    i=1
                    for f in `ls -v $subdatadir/*.txt`; do
                        VolNum=`printf "%05d" $i`
                        mv $f "$subdatadir/$BaseName-$VolNum.txt" > /dev/null
                        (( i += 1 ))
                    done                    
	        		(( m += 1 ))
	    		done
	    	(( n += 1 ))
		done
	else
		echo -e "!!! WARNING !!!\nDICOM DATA NOT FOUND "
    fi
done  